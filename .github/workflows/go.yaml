name: Go CI and Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Cache Go modules
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    # Set up Go environment
    - name: Set up Go 1.23
      uses: actions/setup-go@v4
      with:
        go-version: 1.23

    # Install dependencies
    - name: Install dependencies
      run: go mod download

    # Install golint
    - name: Install golint
      run: go install golang.org/x/lint/golint@latest

    # Run golint
    - name: Run golint
      run: |
        # Run golint on the entire project
        gofmt -s -l . | golint | tee /dev/stderr | wc -l | xargs -I {} echo "Found {} issues"
        if [ {} -gt 0 ]; then exit 1; fi

    # Run the tests
    - name: Run Go tests
      run: go test -v ./...

    # Optional: Check for Go modules tidiness
    - name: Check Go modules
      run: go mod tidy -v

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Cache Docker layers
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    # Log in to GHCR using GitHub Token
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHRC_TOKEN }}

    - name: Build and Push Docker image
      env:
        GITHUB_TOKEN: ${{ secrets.GHRC_TOKEN }}  # Required for authentication to push the image
      run: |
        # Get the first 8 characters of the commit hash
        COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-8)

        # Define the image name
        IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/todo-application

        # Build and push Docker image with caching
        if [ -d /tmp/.buildx-cache ]; then
          echo "Using cache from /tmp/.buildx-cache"
          docker buildx build --push \
            -t $IMAGE_NAME:latest \
            -t $IMAGE_NAME:$COMMIT_HASH \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            .
        else
          echo "No cache found, building without cache"
          docker buildx build --push \
            -t $IMAGE_NAME:latest \
            -t $IMAGE_NAME:$COMMIT_HASH \
            .
        fi

